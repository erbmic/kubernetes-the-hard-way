- name: Create K8s Hard-Way VMs on libvirt (Ansible-only)
  hosts: localhost
  gather_facts: false
  vars_files: ['../vars/vms.yml']
  collections: [community.libvirt]
  vars:
    ssh_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
    libvirt_pool: default
    libvirt_uri: "qemu:///system"
    pool_dir: "/var/lib/libvirt/images"

  tasks: 
    - name: Ensure pool directory exists
      become: true
      file:
        path: "{{ pool_dir }}"
        state: directory
        mode: "0755"

    - name: List existing pools (system URI)
      community.libvirt.virt_pool:
        command: list_pools
        uri: "{{ libvirt_uri }}"
      register: pools

    - name: Define dir pool if missing (idempotent)
      community.libvirt.virt_pool:
        uri: "{{ libvirt_uri }}"
        command: define
        name: "{{ libvirt_pool }}"
        xml: |
          <pool type='dir'>
            <name>{{ libvirt_pool }}</name>
            <target><path>{{ pool_dir }}</path></target>
          </pool>
      when: libvirt_pool not in (pools.pools | default([]))

    - name: Ensure pool is active
      community.libvirt.virt_pool:
        uri: "{{ libvirt_uri }}"
        name: "{{ libvirt_pool }}"
        state: active

    - name: Ensure pool autostart is enabled (via virsh)
      command: "virsh -c {{ libvirt_uri }} pool-autostart {{ libvirt_pool }}"
      register: autostart_cmd
      changed_when: autostart_cmd.rc == 0
      failed_when: autostart_cmd.rc != 0 and
                  ('already active' not in (autostart_cmd.stderr | default(''))) and
                  ('is already marked as autostarted' not in (autostart_cmd.stderr | default('')))

    - name: Ensure cloud image present
      get_url:
        url: "{{ image_url }}"
        dest: "../images/jammy.qcow2"
        mode: "0644"

    - name: Refresh storage pool
      community.libvirt.virt_pool:
        name: "{{ libvirt_pool }}"
        command: refresh

    - name: Get pool XML
      command: "virsh -c {{ libvirt_uri }} pool-dumpxml {{ libvirt_pool }}"
      register: pool_xml
      changed_when: false

    - name: Extract pool path
      set_fact:
        pool_path: "{{ pool_xml.stdout | regex_search('<path>(.*?)</path>', '\\1') }}"

    - name: Create qcow2 volumes with backing (libvirt XML)
      community.libvirt.virt_volume:
        pool: "{{ libvirt_pool }}"
        state: present
        xml: |
          <volume type='file'>
            <name>{{ item.name }}.qcow2</name>
            <capacity unit='G'>{{ item.disk_gb }}</capacity>
            <target>
              <format type='qcow2'/>
            </target>
            <backingStore type='file'>
              <path>{{ (playbook_dir + '/../images/jammy.qcow2') | realpath }}</path>
              <format type='qcow2'/>
            </backingStore>
          </volume>
      loop: "{{ vms }}"

    - name: Render cloud-init user-data
      template:
        src: "../cloudinit/user-data.tpl"
        dest: "../cloudinit/{{ item.name }}-user-data"
      loop: "{{ vms }}"
      vars:
        name: "{{ item.name }}"
        ssh_key: "{{ ssh_key | default('') }}"

    - name: Render cloud-init network-config
      template:
        src: "../cloudinit/network-config.tpl"
        dest: "../cloudinit/{{ item.name }}-network-config"
      loop: "{{ vms }}"
      vars:
        ip: "{{ item.ip }}"
        gw: "{{ item.gw }}"
        dns: "{{ item.dns }}"

    - name: Create CIDATA CDROM via libvirt
      community.libvirt.virt_volume:
        pool: "{{ libvirt_pool }}"
        command: create_cidata_cdrom
        name: "{{ item.name }}-seed.iso"
        cloudinit_config:
          USERDATA: "{{ lookup('file', playbook_dir + '/../cloudinit/' + item.name + '-user-data') }}"
          NETWORK_CONFIG: "{{ lookup('file', playbook_dir + '/../cloudinit/' + item.name + '-network-config') }}"
      loop: "{{ vms }}"

    - name: Define domains via ultra-minimal XML
      community.libvirt.virt:
        uri: "{{ libvirt_uri }}"
        command: define
        xml: |
          <domain type='kvm'>
            <name>{{ item.name }}</name>
            <memory unit='MiB'>{{ item.mem_mb }}</memory>
            <vcpu>{{ item.vcpus }}</vcpu>
            <os>
              <type arch='x86_64'>hvm</type>
              <boot dev='hd'/>
              <boot dev='cdrom'/>
            </os>
            <devices>
              <disk type='file' device='disk'>
                <driver name='qemu' type='qcow2'/>
                <source file='{{ pool_path }}/{{ item.name }}.qcow2'/>
                <target dev='vda' bus='virtio'/>
              </disk>
              <disk type='file' device='cdrom'>
                <source file='{{ pool_path }}/{{ item.name }}-seed.iso'/>
                <target dev='sdb' bus='sata'/>
                <readonly/>
              </disk>
              <interface type='network'>
                <source network='{{ libvirt_network }}'/>
              </interface>
              <graphics type='none'/>
            </devices>
          </domain>
      loop: "{{ vms }}"



    - name: Ensure domains are running
      community.libvirt.virt:
        uri: "{{ libvirt_uri }}"
        name: "{{ item.name }}"
        state: running
        autostart: true
      loop: "{{ vms }}"

    - name: Wait for SSH on each VM
      wait_for:
        host: "{{ item.ip.split('/')[0] }}"
        port: 22
        timeout: 300
      loop: "{{ vms }}"
